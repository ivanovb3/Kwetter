@startuml blogging_context
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

AddElementTag("microservice", $bgColor="#93A8FF")

Container(frontend, "Web Application", "JavaScript, React", "The user intefrace used to share information with other people")
Container(frontendmods, "Web Application", "JavaScript, React", "The admin and moderator interface used to manage users")
Container(gateway, "API Gateway", "Spring", "Security, load balancing")
Container(discovery, "Service Discovery", "Spring", "Acts as guide to routes services and maintains list of services")

System_Boundary(c1, "Services") {
    Container(userservice, "User Service", "Java, Spring", "Handles access with users information", $tags="microservice")
    Container(tweetservice, "Tweet Service", "Java, Spring", "Handles communication with tweets", $tags="microservice")
    ContainerDb(usersdb, "Users database", "MySQL", "Holds user information, followers")
    ContainerDb(tweetsdb, "Tweets database", "MySQL", "Contains tweets, comments, reacts")
    'Container(followerservice, "Follower Service", "Java, Spring", "Handles communication with followers", $tags="microservice")
}

'ContainerDb(followersdb, "Followers database", "MySQL", "Contains relationships between users (follows)")

Rel(frontend, gateway, "Makes API calls ", "HTTPS/JSON")
Rel(frontendmods, gateway, "Makes API calls ", "HTTPS/JSON")
Rel(gateway, discovery, "Makes API calls ", "HTTPS/JSON")
Rel(discovery, userservice, "JWT")
Rel(discovery, tweetservice, "JWT")
'Rel(frontend, tweetservice, "Makes API calls ", "HTTPS/JSON")
'Rel(frontend, followerservice, "Makes API calls ", "HTTPS/JSON")
'Rel(followerservice, userservice, "Retrieves user id", "HTTPS/JSON")
Rel(userservice, usersdb, "Reads/Writes")
Rel(tweetservice, tweetsdb, "Reads/Writes")
'Rel(followerservice, followersdb, "Reads/Writes")

SHOW_LEGEND()
@enduml